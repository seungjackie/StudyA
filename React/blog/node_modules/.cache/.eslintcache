[{"/Users/bagseungjae/Desktop/Home/React/blog/src/index.js":"1","/Users/bagseungjae/Desktop/Home/React/blog/src/App.js":"2","/Users/bagseungjae/Desktop/Home/React/blog/src/reportWebVitals.js":"3","/Users/bagseungjae/Desktop/Home/React/blog/src/components/login.js":"4","/Users/bagseungjae/Desktop/Home/React/blog/src/components/signup.js":"5","/Users/bagseungjae/Desktop/Home/React/blog/src/components/Login.js":"6","/Users/bagseungjae/Desktop/Home/React/blog/src/components/Signup.js":"7"},{"size":500,"mtime":1644825678642,"results":"8","hashOfConfig":"9"},{"size":156,"mtime":1644827678666,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1644825678643,"results":"11","hashOfConfig":"9"},{"size":2944,"mtime":1644826248744,"results":"12","hashOfConfig":"9"},{"size":5728,"mtime":1644826292082,"results":"13","hashOfConfig":"9"},{"size":2944,"mtime":1644826248744,"results":"14","hashOfConfig":"9"},{"size":5728,"mtime":1644826292082,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o7a3ae",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"37"},"/Users/bagseungjae/Desktop/Home/React/blog/src/index.js",[],[],"/Users/bagseungjae/Desktop/Home/React/blog/src/App.js",[],[],"/Users/bagseungjae/Desktop/Home/React/blog/src/reportWebVitals.js",[],[],"/Users/bagseungjae/Desktop/Home/React/blog/src/components/login.js",["41"],[],"import React from \"react\";\nimport Signup from \"../Component/Login/Signup\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// import Nickname from \"../Component/Login/Nickname\";\n​\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n​\n    this.state = {\n      idx: null,\n      email: \"\",\n      pw: \"\",\n      nickname: \"\",\n      isLogin: null\n    };\n  }\n  //이메일 입력창 관리\n  handleEmail = e => {\n    this.setState({\n      email: e.target.value\n    });\n  };\n  //패스워드 입력창 관리\n  handlePW = e => {\n    this.setState({\n      pw: e.target.value\n    });\n  };\n  //로그인버튼 클릭시 서버로 데이터 전송\n  handleSubmit = e => {\n    e.preventDefault();\n​\n    const login_info = {\n      method: \"POST\",\n      body: JSON.stringify(this.state),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(\"http://localhost:9089/login\", login_info)\n      .then(res => {\n        return res.json();\n      })\n      .then(json => {\n        //json형식 {idx: 8, nickname: \"noh\", email: \"noh@gmail.com\", success: true}\n        if (json.success === true) {\n          alert(\"로그인되었습니다\");\n          // 서버로 부터 받은 JSON형태의 데이터를 로컬스토리지에 우선 저장한다.\n          window.localStorage.setItem('userInfo', JSON.stringify(json))\n          //스테이트에 유저정보를 저장한다.\n          this.setState({\n            idx: json.idx,\n            email: json.email,\n            nickname: json.nickname,\n            isLogin: json.success\n          });\n          this.props.history.push(\"/main\")\n        } else {\n          alert(\"아이디 혹은 비밀번호를 확인하세요\");\n        }\n      });\n  };\n​\n  render() {\n    return (\n      <Router>\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            {/* 이메일 인풋창 */}\n            <div>\n              <span>이메일</span>\n              <input\n                placeholder=\"이메일을 입력하세요\"\n                value={this.state.email}\n                onChange={this.handleEmail}\n              />\n            </div>\n            {/* 비밀번호 인풋 */}\n            <div>\n              <span>비밀번호</span>\n              <input\n                placeholder=\"비밀번호를 입력하세요\"\n                value={this.state.password}\n                onChange={this.handlePW}\n                type=\"password\"\n              />\n            </div>\n            <div>\n              {/* 로그인버튼 , 회원가입버튼*/}\n              <button type=\"submit\">로그인</button>\n              {/* 회원가입 버튼 클릭 -> /signup페이지로 이동 */}\n              <button onClick={() => this.props.history.push(\"/signup\")}>\n                회원가입\n              </button>\n            </div>\n          </form>\n        </div>\n      </Router>\n    );\n  }\n}\n​\nexport default Login;",["42","43"],"/Users/bagseungjae/Desktop/Home/React/blog/src/components/signup.js",["44"],[],"import React from \"react\";\nimport Email from \"./Email\";\nimport Nickname from \"./Nickname\";\nimport Password from \"./Password\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n​\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n​\n    this.state = {\n      email: \"\",\n      nickname: \"\",\n      pw: \"\",\n      re_pw: \"\",\n      emailCheck: \"\",\n      nicknameCheck: \"\",\n      pwCheck: \"\"\n    };\n  }\n  //이메일 인풋창 핸들링\n  handleEmail = e => {\n    e.preventDefault();\n    this.setState({\n      email: e.target.value\n    });\n  };\n  //이메일 중복검사\n  checkEmail = e => {\n    e.preventDefault();\n​\n    //이메일 유효성 검사 함수\n    const chkEmail = function(str) {\n      var regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n      return regExp.test(str) ? true : false;\n    };\n​\n    const inputEmail = {\n      email: this.state.email\n    };\n    const email_info = {\n      method: \"POST\",\n      body: JSON.stringify(inputEmail),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n​\n    if (chkEmail(this.state.email) === false) {\n      alert(\"이메일 형식이 유효하지 않습니다.\");\n      this.setState({\n        email: \"\"\n      });\n    } else {\n      fetch(\"http://localhost:9089/user/email\", email_info)\n        .then(res => res.json())\n        .then(json => {\n          if (json === true) {\n            alert(\"사용가능 한 아이디입니다\");\n            this.setState({\n              emailCheck: this.state.email\n            });\n          } else {\n            alert(\"이미 존재하는 아이디입니다\");\n          }\n        });\n    }\n  };\n​\n  //닉네임 인풋창 핸들링\n  handleNickname = e => {\n    e.preventDefault();\n    this.setState({\n      nickname: e.target.value\n    });\n  };\n  //닉네임 중복검사\n  checkNickname = e => {\n    e.preventDefault();\n​\n    const chkNickname = function(str) {\n      var regNm = /^[가-힣]{2,15}|[a-zA-Z]{2,15}\\s[a-zA-Z]{2,15}$/;\n      return regNm.test(str) ? true : false;\n    };\n​\n    const inputNickname = {\n      nickname: this.state.nickname\n    };\n​\n    const nickname_info = {\n      method: \"POST\",\n      body: JSON.stringify(inputNickname),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    if (chkNickname(this.state.nickname) === false) {\n      alert(\"한글,영문 대소문자 2~15자리만 사용 가능합니다\");\n    } else {\n      fetch(\"http://localhost:9089/user/nick\", nickname_info)\n        .then(res => res.json())\n        .then(json => {\n          if (json === true) {\n            alert(\"사용 가능한 닉네임입니다.\");\n            this.setState({\n              nicknameCheck: this.state.nickname\n            });\n          } else {\n            alert(\"이미 존재하는 닉네임입니다.\");\n          }\n        });\n    }\n  };\n  //첫번째 패스워드 입력창 set변환\n  handlePW = e => {\n    e.preventDefault();\n    this.setState({\n      pw: e.target.value\n    });\n  };\n  //두번째 패스워드 입력창 set변환\n  handleRE_PW = e => {\n    e.preventDefault();\n    this.setState({\n      re_pw: e.target.value\n    });\n  };\n  //첫번 째 두번 째 패스워드 일치 확인\n  checkPW = e => {\n    e.preventDefault();\n​\n    //비밀번호 유효성검사(영문,숫자 혼합 6~20)\n    const chkPwd = function(str) {\n      var reg_pwd = /^.*(?=.{6,20})(?=.*[0-9])(?=.*[a-zA-Z]).*$/;\n      return !reg_pwd.test(str) ? false : true;\n    };\n​\n    if (chkPwd(this.state.re_pw) === false) {\n      alert(\"영문,숫자를 혼합하여 6~12자 이내\");\n      this.setState({\n        pw: \"\",\n        re_pw: \"\"\n      });\n    } else {\n      if (this.state.pw === this.state.re_pw) {\n        alert(\"일치합니다.\");\n        this.setState({\n          pwCheck: this.state.re_pw\n        });\n      } else {\n        alert(\"불일치합니다.\");\n      }\n    }\n  };\n  //서버로 가입 양식 제출\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      email,\n      emailCheck,\n      nickname,\n      nicknameCheck,\n      pwCheck,\n      pw,\n      re_pw\n    } = this.state;\n​\n    const signupInfo = {\n      email: this.state.emailCheck,\n      pw: this.state.pwCheck,\n      nickname: this.state.nicknameCheck\n    };\n​\n    const signup_info = {\n      method: \"POST\",\n      body: JSON.stringify(signupInfo),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n​\n    if (\n      email &&\n      nickname &&\n      pw &&\n      re_pw &&\n      email === emailCheck &&\n      nickname === nicknameCheck &&\n      pw === re_pw &&\n      re_pw === pwCheck\n    ) {\n      fetch(\"http://localhost:9089/user\", signup_info)\n        .then(alert(\"가입이 완료되었습니다.\"))\n        .then(this.props.history.push(\"/login\"));\n    } else {\n      alert(\"입력값을 확인해주세요\");\n    }\n  };\n​\n  render() {\n    return (\n      <div>\n        <h1>Signup</h1>\n        <br />\n        <div>\n          <Email\n            handleEmail={this.handleEmail}\n            checkEmail={this.checkEmail}\n            value={this.state.email}\n          />\n          <Nickname\n            handleNickname={this.handleNickname}\n            checkNickname={this.checkNickname}\n            value={this.state.nickname}\n          />\n          <Password\n            handlePW={this.handlePW}\n            handleRE_PW={this.handleRE_PW}\n            checkPW={this.checkPW}\n            value1={this.state.pw}\n            value2={this.state.re_pw}\n          />\n          <div>\n            <button onClick={this.handleSubmit}>가입하기</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n​\nexport default Signup;\n​","/Users/bagseungjae/Desktop/Home/React/blog/src/components/Login.js",["45"],[],["46","47"],"/Users/bagseungjae/Desktop/Home/React/blog/src/components/Signup.js",["48"],[],{"ruleId":null,"fatal":true,"severity":2,"message":"49","line":5,"column":0},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":null,"fatal":true,"severity":2,"message":"54","line":6,"column":0},{"ruleId":null,"fatal":true,"severity":2,"message":"49","line":5,"column":0},{"ruleId":"50","replacedBy":"55"},{"ruleId":"52","replacedBy":"56"},{"ruleId":null,"fatal":true,"severity":2,"message":"54","line":6,"column":0},"Parsing error: Unexpected character '​'. (5:0)","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"Parsing error: Unexpected character '​'. (6:0)",["57"],["58"],"no-global-assign","no-unsafe-negation"]